{
    "swagger": "2.0",
    "info": {
        "description": "Laptop Lounge - ðŸš€ Your One-Stop Destination for Ultimate Laptop Shopping!\nðŸ›’ðŸ’» Browse, compare, and buy top-notch laptops effortlessly.\nPowered by cutting-edge technology, we bring you a seamless shopping experience.\nðŸŒŸ Dive into the future of laptop shopping with Laptop Lounge! ðŸš€ðŸ”¥",
        "title": "Laptop Lounge API",
        "contact": {
            "name": "Creator: Shahabaz Sulthan",
            "email": "shahabazsulthan4@gmail.com"
        }
    },
    "paths": {
        "/address/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of addresses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Get Addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/requestmodel.Address"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Add a new address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Add Address",
                "parameters": [
                    {
                        "description": "Address object to be added",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Address"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Update an existing address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Update Address",
                "parameters": [
                    {
                        "description": "Updated address information",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/address/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete an address by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Delete Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID in the query parameter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve details for the admin. Requires a valid Bearer token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get Admin Dashboard Details",
                "responses": {
                    "200": {
                        "description": "Admin details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication required.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brand/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a paginated list of brands using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Get List of Brands",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of brands",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create a new brand using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Create a Brand",
                "parameters": [
                    {
                        "description": "Name of the brand",
                        "name": "Brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Brand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Brand created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit an existing brand using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Edit a Brand by ID",
                "parameters": [
                    {
                        "description": "Updated name of the brand",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.BrandDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brand/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete an existing brand by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a Brand by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the brand to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get All Categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can add a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Add Category",
                "parameters": [
                    {
                        "description": "Details of the category",
                        "name": "Details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit an existing category using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Edit a Category by ID",
                "parameters": [
                    {
                        "description": "Updated category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.CategoryDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Delete an existing category using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete a Category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of coupons for the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Get Coupons (Admin)",
                "responses": {
                    "200": {
                        "description": "Coupons retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve coupons.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create a new coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Create Coupon (Admin)",
                "parameters": [
                    {
                        "description": "Coupon details to be created",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Coupon"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Coupon created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to create the coupon.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon/block/{couponID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Block a coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Block Coupon (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the coupon to be blocked",
                        "name": "couponID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon blocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid coupon ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon/unblock/{couponID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Unblock a coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Unblock Coupon (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the coupon to be unblocked",
                        "name": "couponID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon unblocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid coupon ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/helpdesk/{requestID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Update the answer for a help desk request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Help Desk"
                ],
                "summary": "Update Help Desk Answer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the request to update",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated answer details",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.HelpDeskAnswer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Answer updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "description": "Using this handler, admins can log in and receive an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Admin Login",
                "parameters": [
                    {
                        "description": "Admin login details",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.AdminLoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in. Token returned.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/block/{sellerID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can block a seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Block Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully blocked seller",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/getsellers": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of sellers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Get Sellers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of sellers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/pending": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of pending sellers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Get Pending Sellers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of pending sellers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/singleview/{sellerID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get details of a single seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Get Single Seller Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/unblock/:sellerID": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can block a seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Block Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/verify/{sellerID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can verify a seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Seller Control"
                ],
                "summary": "Verify Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully verified the seller",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block/{userID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can block a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Control"
                ],
                "summary": "Block User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID in the URL path",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/getuser": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can view users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins User Controll"
                ],
                "summary": "Get All Users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/unblock/{userID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can unblock a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin User Control"
                ],
                "summary": "Unblock User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID in the URL path",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Retrieve all items in the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Get User Cart",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user cart items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Create a user cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Create User Cart",
                "parameters": [
                    {
                        "description": "Cart details for creating",
                        "name": "cart",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Cart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User cart created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart/{productID}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete a product from the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Delete Item from User Cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to delete from the cart",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted from the cart successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/filter": {
            "get": {
                "description": "Filter products based on category, brand, product name, and price range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Filter Products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category filter",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Brand filter",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product name filter",
                        "name": "product",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum price filter",
                        "name": "minprice",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price filter",
                        "name": "maxprice",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products filtered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid filter criteria.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/helpdesk/": {
            "post": {
                "description": "Create a new help desk request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help Desk"
                ],
                "summary": "Create Help Desk Request",
                "parameters": [
                    {
                        "description": "Help desk request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.HelpDeskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/helpdesk/replayed": {
            "get": {
                "description": "Retrieve all help desk requests that have been replied to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help Desk"
                ],
                "summary": "Get Replied Help Desk Requests",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved replied requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Unable to retrieve replied requests.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/helpdesk/unreplayed": {
            "get": {
                "description": "Retrieve all help desk requests that are yet to be replied to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help Desk"
                ],
                "summary": "Get Unreplied Help Desk Requests",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved unreplied requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/invoice/{orderItemID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshToken": []
                    }
                ],
                "description": "Generate an invoice for the specified order item ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invoice"
                ],
                "summary": "Generate invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Item ID",
                        "name": "orderItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/log": {
            "get": {
                "description": "Retrieve and display the content of the log file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Get Log File",
                "responses": {
                    "200": {
                        "description": "Log file content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Using this handler, users can log in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Get a list of all orders for the logged in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Orders"
                ],
                "summary": "Get all orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Create a new order with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/return/{orderItemID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshToken": []
                    }
                ],
                "description": "Return an order by its ID for the logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Orders"
                ],
                "summary": "Return order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Item ID",
                        "name": "orderItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/{orderItemID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Get the details of a single order by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Orders"
                ],
                "summary": "Get order details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Item ID",
                        "name": "orderItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshToken": []
                    }
                ],
                "description": "Cancel an order by its ID for the logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Orders"
                ],
                "summary": "Cancel order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Item ID",
                        "name": "orderItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/payment/verify": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Verify an online payment using the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntegration"
                ],
                "summary": "Verify Online Payment",
                "parameters": [
                    {
                        "description": "Details for online payment verification",
                        "name": "verificationDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.OnlinePaymentVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment verification successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid verification details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/product/AtoZ": {
            "get": {
                "description": "Retrieve a list of products sorted by name from A to Z.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get A To Z Product Name",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/product/HighToLow": {
            "get": {
                "description": "Retrieve a list of products sorted by price from high to low.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get High To Low Price",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/product/LowToHigh": {
            "get": {
                "description": "Retrieve a list of products sorted by price from low to high.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get Low To High Price",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/product/ZtoA": {
            "get": {
                "description": "Retrieve a list of products sorted by name from Z to A.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get Z To A Product Name",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/product/{productid}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details of a single seller product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "productid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the seller product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieve a list of products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Available Laptops",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Get User",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user's profile",
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/profile/": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Update the user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "User profile details for updating",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserEditProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the user's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/review/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Retrieve reviews for a product by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Get Reviews by Product ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the product",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved reviews",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/review/{productID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Get the average rating for a product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Get Average Rating",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the product",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved average rating",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Add a review for a product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Add Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the product",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review details",
                        "name": "reviewRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.ReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review added successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/review/{reviewID}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Delete a review by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete Review by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the review",
                        "name": "reviewID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/block/{categoryOfferID}": {
            "patch": {
                "description": "Block or disable a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Block Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be blocked",
                        "name": "categoryOfferID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer blocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/delete/{categoryOfferID}": {
            "delete": {
                "description": "Delete a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Delete Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be deleted",
                        "name": "categoryOfferID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/unblock/{categoryOfferID}": {
            "patch": {
                "description": "Unblock or enable a previously blocked category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Unblock Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be unblocked",
                        "name": "categoryOfferID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer unblocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/{SellerID}": {
            "get": {
                "description": "Retrieve all category offers by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Get Seller Category Offers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the seller",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve category offers.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/{seller_id}": {
            "post": {
                "description": "Create a new offer for a category by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Create Category Offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the seller",
                        "name": "seller_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details for creating a category offer",
                        "name": "categoryOffer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.CategoryOffer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Category offer created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid details for creating a category offer.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Edit details of a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Edit Category Offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the seller",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details for editing a category offer",
                        "name": "editDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditCategoryOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid edit details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/login": {
            "post": {
                "description": "Using this handler, a seller can log in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Seller Login",
                "parameters": [
                    {
                        "description": "Seller login details",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/cancel/{SellerID}/{orderID}": {
            "patch": {
                "description": "Cancel an order by its ID for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Cancel order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/cancelled/{SellerID}": {
            "get": {
                "description": "Get all cancelled orders for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Get seller cancelled orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/delivered/{SellerID}": {
            "get": {
                "description": "Get all delivered orders for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Get seller delivered orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/processing/{SellerID}": {
            "get": {
                "description": "Get all processing orders for the specified seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Get seller processing orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/{SellerID}": {
            "get": {
                "description": "Get all orders for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Get all seller orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/{SellerID}/{orderItemID}": {
            "patch": {
                "description": "Confirm an order as delivered by its ID for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order Management"
                ],
                "summary": "Confirm order delivered",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order Item ID",
                        "name": "orderItemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/seller/{SellerID}/{page}": {
            "get": {
                "description": "Retrieve a list of seller products with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Get Seller Products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{SellerID}": {
            "post": {
                "description": "Add a new product from the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Add Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the seller",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product details for adding",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.ProductReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Edit details of a seller product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Edit Seller Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully edited the seller product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{SellerID}/{productid}": {
            "delete": {
                "description": "Delete a product by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "productid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{SellerID}/{productid}/block": {
            "patch": {
                "description": "Block a product from being displayed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Block Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "productid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully blocked the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{SellerID}/{productid}/unblock": {
            "patch": {
                "description": "Unblock a product for display.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Unblock Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "productid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unblocked the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/profile/{SellerID}": {
            "get": {
                "description": "Retrieve details of the seller's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Profile"
                ],
                "summary": "Get Seller Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the seller's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update the seller's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Profile"
                ],
                "summary": "Update Seller Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seller profile details for updating",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerEditProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the seller's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/day/{SellerID}/{year}/{month}/{day}": {
            "get": {
                "description": "Generate a sales report for the specified seller ID for the past number of days",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Report"
                ],
                "summary": "Generate sales report for custom days",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Year",
                        "name": "year",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Month",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Day",
                        "name": "day",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/days/{SellerID}/{days}": {
            "get": {
                "description": "Generate a custom sales report for the specified seller ID for the given number of days",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Report"
                ],
                "summary": "Generate custom sales report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of days",
                        "name": "days",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/pdf/{SellerID}": {
            "get": {
                "description": "Generate a sales report PDF for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Report"
                ],
                "summary": "Generate sales report PDF",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Seller not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/xlsx/{SellerID}": {
            "get": {
                "description": "Generate a sales report in XLSX format for the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Report"
                ],
                "summary": "Generate sales report in XLSX",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/signup": {
            "post": {
                "description": "Using this handler, a seller can sign up.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Seller Signup",
                "parameters": [
                    {
                        "description": "Seller signup details",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerSignup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully signed up",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/{SellerID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details for the seller sales.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Get Seller Dashboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "SellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication required.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sendOTP": {
            "post": {
                "description": "Send OTP (One-Time Password) for verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Send OTP To Mobile",
                "parameters": [
                    {
                        "description": "OTP details for sending",
                        "name": "otp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SendOtp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Using this handler, users can sign up.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Signup details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsemodel.SignupData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/verifyOTP": {
            "post": {
                "description": "Verify the OTP (One-Time Password) sent to the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "OTP details for verification",
                        "name": "otp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.OtpVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wallet/": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details of the user's wallet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Wallet"
                ],
                "summary": "Get User Wallet",
                "responses": {
                    "200": {
                        "description": "User wallet details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve user wallet details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wallet/transaction": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the transaction history of the user's wallet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Wallet"
                ],
                "summary": "Get User Wallet Transactions",
                "responses": {
                    "200": {
                        "description": "User wallet transactions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve user wallet transactions.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wishlist": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Retrieve the user's wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Get User Wishlist",
                "responses": {
                    "200": {
                        "description": "Wishlist retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. User ID not found in context.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wishlist/{productID}": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Add a product to the user's wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Add Product to Wishlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the product to add",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added to wishlist successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid input.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User ID not found in context.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "RefreshtokenAuth": []
                    }
                ],
                "description": "Remove a product from the user's wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Remove Product from Wishlist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the product to remove",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product removed from wishlist successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request. User ID not found in context.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requestmodel.Address": {
            "type": "object",
            "required": [
                "city",
                "firstName",
                "landmark",
                "phoneNumber",
                "state",
                "street",
                "userid"
            ],
            "properties": {
                "addressID": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string",
                    "minLength": 6
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.AdminLoginData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.Brand": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.BrandDetails": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.Cart": {
            "type": "object",
            "required": [
                "productid",
                "quantity"
            ],
            "properties": {
                "cartid_userid": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "productid": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1
                }
            }
        },
        "requestmodel.Category": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.CategoryDetails": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.CategoryOffer": {
            "type": "object",
            "required": [
                "category_discount",
                "category_id",
                "title",
                "validity"
            ],
            "properties": {
                "category_discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 1
                },
                "category_id": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "validity": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "requestmodel.Coupon": {
            "type": "object",
            "required": [
                "expire_date",
                "name",
                "type"
            ],
            "properties": {
                "discount": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "string"
                },
                "maximum_allowed": {
                    "type": "integer"
                },
                "minimum_required": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requestmodel.EditAddress": {
            "type": "object",
            "required": [
                "addressID",
                "city",
                "firstName",
                "landmark",
                "lastName",
                "phoneNumber",
                "pincode",
                "state",
                "street",
                "userid"
            ],
            "properties": {
                "addressID": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string",
                    "minLength": 6
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.EditCategoryOffer": {
            "type": "object",
            "required": [
                "category_discount",
                "id",
                "title"
            ],
            "properties": {
                "category_discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 1
                },
                "id": {
                    "type": "string"
                },
                "sellerID": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "validity": {
                    "type": "integer"
                }
            }
        },
        "requestmodel.EditProduct": {
            "type": "object",
            "required": [
                "discount",
                "id",
                "modelName",
                "mrp",
                "units"
            ],
            "properties": {
                "discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 0
                },
                "id": {
                    "type": "string"
                },
                "modelName": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "mrp": {
                    "type": "integer",
                    "minimum": 0
                },
                "saleprice": {
                    "type": "integer"
                },
                "units": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "requestmodel.HelpDeskAnswer": {
            "type": "object",
            "required": [
                "answer"
            ],
            "properties": {
                "answer": {
                    "type": "string"
                }
            }
        },
        "requestmodel.HelpDeskRequest": {
            "type": "object",
            "required": [
                "message",
                "name",
                "phone_number",
                "subject"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "requestmodel.OnlinePaymentVerification": {
            "type": "object",
            "required": [
                "order_id",
                "payment_id",
                "signature"
            ],
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "payment_id": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "requestmodel.Order": {
            "type": "object",
            "required": [
                "addressid",
                "paymentMethod",
                "userid"
            ],
            "properties": {
                "addressid": {
                    "type": "string"
                },
                "couponid": {
                    "type": "string"
                },
                "paymentMethod": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.OtpVerification": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "requestmodel.ProductReq": {
            "type": "object",
            "required": [
                "batteryCapacity",
                "brandID",
                "categoryID",
                "description",
                "discount",
                "graphicsCard",
                "modelName",
                "mrp",
                "operatingSystem",
                "processorType",
                "screenSize",
                "storageCapacityGB",
                "units"
            ],
            "properties": {
                "batteryCapacity": {
                    "type": "integer",
                    "minimum": 3000
                },
                "brandID": {
                    "type": "integer"
                },
                "categoryID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "minLength": 5
                },
                "discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 0
                },
                "graphicsCard": {
                    "type": "string"
                },
                "imageURL": {
                    "type": "string"
                },
                "modelName": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "mrp": {
                    "type": "integer",
                    "minimum": 0
                },
                "operatingSystem": {
                    "type": "string"
                },
                "processorType": {
                    "type": "string"
                },
                "salePrice": {
                    "type": "integer"
                },
                "screenSize": {
                    "type": "number",
                    "minimum": 10
                },
                "sellerID": {
                    "type": "integer"
                },
                "storageCapacityGB": {
                    "type": "integer",
                    "minimum": 128
                },
                "units": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "requestmodel.ReviewRequest": {
            "type": "object",
            "required": [
                "rating"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1
                }
            }
        },
        "requestmodel.SellerEditProfile": {
            "type": "object",
            "required": [
                "confirmpassword",
                "description",
                "email",
                "gstno",
                "id",
                "name",
                "password"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gstno": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SellerLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SellerSignup": {
            "type": "object",
            "required": [
                "description",
                "gstno",
                "name"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gstno": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SendOtp": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserDetails": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                },
                "phone": {
                    "type": "string"
                },
                "referalcode": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserEditProfile": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone",
                "userid"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserLogin": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 4
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string"
                },
                "result": {},
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "responsemodel.SignupData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "isUserExist": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "referalCode": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerTokenAuth": {
            "description": "Use your Bearer token for authentication. Example: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "RefreshTokenAuth": {
            "description": "Use your Refresh token to obtain a new Bearer token. Example: \"{token}\"",
            "type": "apiKey",
            "name": "Refreshtoken",
            "in": "header"
        }
    }
}